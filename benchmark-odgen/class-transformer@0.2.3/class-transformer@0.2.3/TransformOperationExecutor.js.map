{"version":3,"sources":["../../src/TransformOperationExecutor.ts"],"names":[],"mappings":"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","file":"TransformOperationExecutor.js","sourcesContent":["import { ClassTransformOptions } from \"./ClassTransformOptions\";\nimport { defaultMetadataStorage } from \"./storage\";\nimport { TypeHelpOptions, TypeOptions } from \"./metadata/ExposeExcludeOptions\";\nimport { TypeMetadata } from \"./metadata/TypeMetadata\";\n\nexport enum TransformationType {\n    PLAIN_TO_CLASS,\n    CLASS_TO_PLAIN,\n    CLASS_TO_CLASS\n}\n\nexport class TransformOperationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private recursionStack = new Set<Object>();\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private transformationType: TransformationType,\n        private options: ClassTransformOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform(source: Object | Object[] | any,\n        value: Object | Object[] | any,\n        targetType: Function | TypeMetadata,\n        arrayType: Function,\n        isMap: boolean,\n        level: number = 0) {\n\n        if (Array.isArray(value) || value instanceof Set) {\n            const newValue = arrayType && this.transformationType === TransformationType.PLAIN_TO_CLASS ? instantiateArrayType(arrayType) : [];\n            (value as any[]).forEach((subValue, index) => {\n                const subSource = source ? source[index] : undefined;\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    let realTargetType;\n                    if (typeof targetType !== \"function\" && targetType && targetType.options && targetType.options.discriminator && targetType.options.discriminator.property && targetType.options.discriminator.subTypes) {\n                        if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                            realTargetType = targetType.options.discriminator.subTypes.find((subType) => subType.name === subValue[(targetType as { options: TypeOptions }).options.discriminator.property]);\n                            const options: TypeHelpOptions = { newObject: newValue, object: subValue, property: undefined };\n                            const newType = targetType.typeFunction(options);\n                            realTargetType === undefined ? realTargetType = newType : realTargetType = realTargetType.value;\n                            if (!targetType.options.keepDiscriminatorProperty) delete subValue[targetType.options.discriminator.property];\n                        }\n                        if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                            realTargetType = subValue.constructor;\n                        }\n                        if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                            subValue[targetType.options.discriminator.property] = targetType.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;\n                        }\n                    } else {\n                        realTargetType = targetType;\n                    }\n                    const value = this.transform(subSource, subValue, realTargetType, undefined, subValue instanceof Map, level + 1);\n\n                    if (newValue instanceof Set) {\n                        newValue.add(value);\n                    } else {\n                        newValue.push(value);\n                    }\n                } else if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    if (newValue instanceof Set) {\n                        newValue.add(subValue);\n                    } else {\n                        newValue.push(subValue);\n                    }\n                }\n            });\n            return newValue;\n        } else if (targetType === String && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return String(value);\n\n        } else if (targetType === Number && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Number(value);\n\n        } else if (targetType === Boolean && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Boolean(value);\n\n        } else if ((targetType === Date || value instanceof Date) && !isMap) {\n            if (value instanceof Date) {\n                return new Date(value.valueOf());\n            }\n            if (value === null || value === undefined)\n                return value;\n            return new Date(value);\n\n        } else if (testForBuffer() && (targetType === Buffer || value instanceof Buffer) && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Buffer.from(value);\n\n        } else if (typeof value === \"object\" && value !== null) {\n\n            // try to guess the type\n            if (!targetType && value.constructor !== Object/* && TransformationType === TransformationType.CLASS_TO_PLAIN*/) targetType = value.constructor;\n            if (!targetType && source) targetType = source.constructor;\n\n            if (this.options.enableCircularCheck) {\n                // add transformed type to prevent circular references\n                this.recursionStack.add(value);\n            }\n\n            const keys = this.getKeys((targetType as Function), value);\n            let newValue: any = source ? source : {};\n            if (!source && (this.transformationType === TransformationType.PLAIN_TO_CLASS || this.transformationType === TransformationType.CLASS_TO_CLASS)) {\n                if (isMap) {\n                    newValue = new Map();\n                } else if (targetType) {\n                    newValue = new (targetType as any)();\n                } else {\n                    newValue = {};\n                }\n            }\n\n            // traverse over keys\n            for (let key of keys) {\n\n                let valueKey = key, newValueKey = key, propertyName = key;\n                if (!this.options.ignoreDecorators && targetType) {\n                    if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        const exposeMetadata = defaultMetadataStorage.findExposeMetadataByCustomName((targetType as Function), key);\n                        if (exposeMetadata) {\n                            propertyName = exposeMetadata.propertyName;\n                            newValueKey = exposeMetadata.propertyName;\n                        }\n\n                    } else if (this.transformationType === TransformationType.CLASS_TO_PLAIN || this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                        const exposeMetadata = defaultMetadataStorage.findExposeMetadata((targetType as Function), key);\n                        if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                            newValueKey = exposeMetadata.options.name;\n                        }\n                    }\n                }\n\n                // get a subvalue\n                let subValue: any = undefined;\n                if (value instanceof Map) {\n                    subValue = value.get(valueKey);\n                } else if (value[valueKey] instanceof Function) {\n                    subValue = value[valueKey]();\n                } else {\n                    subValue = value[valueKey];\n                }\n\n                // determine a type\n                let type: any = undefined, isSubValueMap = subValue instanceof Map;\n                if (targetType && isMap) {\n                    type = targetType;\n\n                } else if (targetType) {\n\n                    const metadata = defaultMetadataStorage.findTypeMetadata((targetType as Function), propertyName);\n                    if (metadata) {\n                        const options: TypeHelpOptions = { newObject: newValue, object: value, property: propertyName };\n                        const newType = metadata.typeFunction ? metadata.typeFunction(options) : metadata.reflectedType;\n                        if (metadata.options && metadata.options.discriminator && metadata.options.discriminator.property && metadata.options.discriminator.subTypes) {\n                            if (!(value[valueKey] instanceof Array)) {\n                                if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                                    type = metadata.options.discriminator.subTypes.find((subType) => {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            return subType.name === subValue[metadata.options.discriminator.property]\n                                        }\n                                    });\n                                    type === undefined ? type = newType : type = type.value;\n                                    if (!metadata.options.keepDiscriminatorProperty) {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            delete subValue[metadata.options.discriminator.property];\n                                        }\n                                    }\n                                }\n                                if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                                    type = subValue.constructor;\n                                }\n                                if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                                    subValue[metadata.options.discriminator.property] = metadata.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;\n                                }\n                            } else {\n                                type = metadata;\n                            }\n                        } else {\n                            type = newType;\n                        }\n                        isSubValueMap = isSubValueMap || metadata.reflectedType === Map;\n                    } else if (this.options.targetMaps) { // try to find a type in target maps\n                        this.options.targetMaps\n                            .filter(map => map.target === targetType && !!map.properties[propertyName])\n                            .forEach(map => type = map.properties[propertyName]);\n                    } else if(this.options.enableImplicitConversion && this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        // if we have no registererd type via the @Type() decorator then we check if we have any\n                        // type declarations in reflect-metadata (type declaration is emited only if some decorator is added to the property.)\n                        const reflectedType = Reflect.getMetadata(\"design:type\", (targetType as Function).prototype, propertyName);\n\n                        if (reflectedType) {\n                            type = reflectedType;\n                        }\n                    }\n                }\n\n                // if value is an array try to get its custom array type\n                const arrayType = Array.isArray(value[valueKey]) ? this.getReflectedType((targetType as Function), propertyName) : undefined;\n\n                // const subValueKey = TransformationType === TransformationType.PLAIN_TO_CLASS && newKeyName ? newKeyName : key;\n                const subSource = source ? source[valueKey] : undefined;\n\n                // if its deserialization then type if required\n                // if we uncomment this types like string[] will not work\n                // if (this.transformationType === TransformationType.PLAIN_TO_CLASS && !type && subValue instanceof Object && !(subValue instanceof Date))\n                //     throw new Error(`Cannot determine type for ${(targetType as any).name }.${propertyName}, did you forget to specify a @Type?`);\n\n                // if newValue is a source object that has method that match newKeyName then skip it\n                if (newValue.constructor.prototype) {\n                    const descriptor = Object.getOwnPropertyDescriptor(newValue.constructor.prototype, newValueKey);\n                    if ((this.transformationType === TransformationType.PLAIN_TO_CLASS || this.transformationType === TransformationType.CLASS_TO_CLASS)\n                        && ((descriptor && !descriptor.set) || newValue[newValueKey] instanceof Function)) //  || TransformationType === TransformationType.CLASS_TO_CLASS\n                        continue;\n                }\n\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    let transformKey = this.transformationType === TransformationType.PLAIN_TO_CLASS ? newValueKey : key;\n                    let finalValue;\n\n                    if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                        // Get original value\n                        finalValue = value[transformKey];\n                        // Apply custom transformation\n                        finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), transformKey, value, this.transformationType);\n                        // If nothing change, it means no custom transformation was applied, so use the subValue.\n                        finalValue = (value[transformKey] === finalValue) ? subValue : finalValue;\n                        // Apply the default transformation\n                        finalValue = this.transform(subSource, finalValue, type, arrayType, isSubValueMap, level + 1);\n                    } else {\n                        finalValue = this.transform(subSource, subValue, type, arrayType, isSubValueMap, level + 1);\n                        finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), transformKey, value, this.transformationType);\n                    }\n\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    } else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                } else if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    let finalValue = subValue;\n                    finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), key, value, this.transformationType);\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    } else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                }\n\n            }\n\n            if (this.options.enableCircularCheck) {\n                this.recursionStack.delete(value);\n            }\n\n            return newValue;\n\n        } else {\n            return value;\n        }\n    }\n\n    private applyCustomTransformations(value: any, target: Function, key: string, obj: any, transformationType: TransformationType) {\n        let metadatas = defaultMetadataStorage.findTransformMetadatas(target, key, this.transformationType);\n\n        // apply versioning options\n        if (this.options.version !== undefined) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n\n                return this.checkVersion(metadata.options.since, metadata.options.until);\n            });\n        }\n\n        // apply grouping options\n        if (this.options.groups && this.options.groups.length) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n\n                return this.checkGroups(metadata.options.groups);\n            });\n        } else {\n            metadatas = metadatas.filter(metadata => {\n                return !metadata.options || !metadata.options.groups || !metadata.options.groups.length;\n            });\n        }\n\n        metadatas.forEach(metadata => {\n            value = metadata.transformFn(value, obj, transformationType);\n        });\n\n        return value;\n    }\n\n    // preventing circular references\n    private isCircular(object: Object) {\n        return this.recursionStack.has(object);\n    }\n\n    private getReflectedType(target: Function, propertyName: string) {\n        if (!target) return undefined;\n        const meta = defaultMetadataStorage.findTypeMetadata(target, propertyName);\n        return meta ? meta.reflectedType : undefined;\n    }\n\n    private getKeys(target: Function, object: Object): string[] {\n\n        // determine exclusion strategy\n        let strategy = defaultMetadataStorage.getStrategy(target);\n        if (strategy === \"none\")\n            strategy = this.options.strategy || \"exposeAll\"; // exposeAll is default strategy\n\n        // get all keys that need to expose\n        let keys: any[] = [];\n        if (strategy === \"exposeAll\") {\n            if (object instanceof Map) {\n                keys = Array.from(object.keys());\n            } else {\n                keys = Object.keys(object);\n            }\n        }\n\n        if (!this.options.ignoreDecorators && target) {\n\n            // add all exposed to list of keys\n            let exposedProperties = defaultMetadataStorage.getExposedProperties(target, this.transformationType);\n            if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                exposedProperties = exposedProperties.map(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                        return exposeMetadata.options.name;\n                    }\n\n                    return key;\n                });\n            }\n            if (this.options.excludeExtraneousValues) {\n                keys = exposedProperties;\n            } else {\n                keys = keys.concat(exposedProperties);\n            }\n\n            // exclude excluded properties\n            const excludedProperties = defaultMetadataStorage.getExcludedProperties(target, this.transformationType);\n            if (excludedProperties.length > 0) {\n                keys = keys.filter(key => {\n                    return excludedProperties.indexOf(key) === -1;\n                });\n            }\n\n            // apply versioning options\n            if (this.options.version !== undefined) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n\n                    return this.checkVersion(exposeMetadata.options.since, exposeMetadata.options.until);\n                });\n            }\n\n            // apply grouping options\n            if (this.options.groups && this.options.groups.length) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n\n                    return this.checkGroups(exposeMetadata.options.groups);\n                });\n            } else {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    return !exposeMetadata || !exposeMetadata.options || !exposeMetadata.options.groups || !exposeMetadata.options.groups.length;\n                });\n            }\n        }\n\n        // exclude prefixed properties\n        if (this.options.excludePrefixes && this.options.excludePrefixes.length) {\n            keys = keys.filter(key => this.options.excludePrefixes.every(prefix => {\n                return key.substr(0, prefix.length) !== prefix;\n            }));\n        }\n\n        // make sure we have unique keys\n        keys = keys.filter((key, index, self) => {\n            return self.indexOf(key) === index;\n        });\n\n        return keys;\n    }\n\n    private checkVersion(since: number, until: number) {\n        let decision = true;\n        if (decision && since)\n            decision = this.options.version >= since;\n        if (decision && until)\n            decision = this.options.version < until;\n\n        return decision;\n    }\n\n    private checkGroups(groups: string[]) {\n        if (!groups)\n            return true;\n\n        return this.options.groups.some(optionGroup => groups.indexOf(optionGroup) !== -1);\n    }\n\n}\n\nfunction instantiateArrayType(arrayType: Function): Array<any> | Set<any> {\n    const array = new (arrayType as any)();\n    if (!(array instanceof Set) && !(\"push\" in array)) {\n        return [];\n    }\n    return array;\n}\n\nexport function testForBuffer(): boolean {\n    try {\n        Buffer\n        return true;\n    } catch { }\n    return false;\n}\n"],"sourceRoot":"."}
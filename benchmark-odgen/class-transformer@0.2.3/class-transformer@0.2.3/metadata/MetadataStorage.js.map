{"version":3,"sources":["../../src/metadata/MetadataStorage.ts"],"names":[],"mappings":"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","file":"MetadataStorage.js","sourcesContent":["import {TypeMetadata} from \"./TypeMetadata\";\nimport {ExposeMetadata} from \"./ExposeMetadata\";\nimport {ExcludeMetadata} from \"./ExcludeMetadata\";\nimport {TransformationType} from \"../TransformOperationExecutor\";\nimport {TransformMetadata} from \"./TransformMetadata\";\n\n/**\n * Storage all library metadata.\n */\nexport class MetadataStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    private _typeMetadatas = new Map<Function, Map<string, TypeMetadata>>();\n    private _transformMetadatas = new Map<Function, Map<string, TransformMetadata[]>>();\n    private _exposeMetadatas = new Map<Function, Map<string, ExposeMetadata>>();\n    private _excludeMetadatas = new Map<Function, Map<string, ExcludeMetadata>>();\n    private _ancestorsMap = new Map<Function, Function[]>();\n\n    // -------------------------------------------------------------------------\n    // Adder Methods\n    // -------------------------------------------------------------------------\n\n    addTypeMetadata(metadata: TypeMetadata) {\n        if (!this._typeMetadatas.has(metadata.target)) {\n            this._typeMetadatas.set(metadata.target, new Map<string, TypeMetadata>());\n    }\n        this._typeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    }\n\n    addTransformMetadata(metadata: TransformMetadata) {\n        if (!this._transformMetadatas.has(metadata.target)) {\n            this._transformMetadatas.set(metadata.target, new Map<string, TransformMetadata[]>());\n    }\n        if (!this._transformMetadatas.get(metadata.target).has(metadata.propertyName)) {\n            this._transformMetadatas.get(metadata.target).set(metadata.propertyName, []);\n        }\n        this._transformMetadatas.get(metadata.target).get(metadata.propertyName).push(metadata);\n    }\n\n    addExposeMetadata(metadata: ExposeMetadata) {\n        if (!this._exposeMetadatas.has(metadata.target)) {\n            this._exposeMetadatas.set(metadata.target, new Map<string, ExposeMetadata>());\n    }\n        this._exposeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    }\n\n    addExcludeMetadata(metadata: ExcludeMetadata) {\n        if (!this._excludeMetadatas.has(metadata.target)) {\n            this._excludeMetadatas.set(metadata.target, new Map<string, ExcludeMetadata>());\n    }\n        this._excludeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    findTransformMetadatas(target: Function, propertyName: string, transformationType: TransformationType): TransformMetadata[] {\n        return this.findMetadatas(this._transformMetadatas, target, propertyName)\n            .filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                    return true;\n\n                if (metadata.options.toClassOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_CLASS ||  transformationType === TransformationType.PLAIN_TO_CLASS;\n                }\n                if (metadata.options.toPlainOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_PLAIN;\n                }\n\n                return true;\n            });\n    }\n\n    findExcludeMetadata(target: Function, propertyName: string): ExcludeMetadata {\n        return this.findMetadata(this._excludeMetadatas, target, propertyName);\n    }\n\n    findExposeMetadata(target: Function, propertyName: string): ExposeMetadata {\n        return this.findMetadata(this._exposeMetadatas, target, propertyName);\n    }\n\n    findExposeMetadataByCustomName(target: Function, name: string): ExposeMetadata {\n        return this.getExposedMetadatas(target).find(metadata => {\n            return metadata.options && metadata.options.name === name;\n        });\n    }\n\n    findTypeMetadata(target: Function, propertyName: string) {\n        return this.findMetadata(this._typeMetadatas, target, propertyName);\n    }\n\n    getStrategy(target: Function): \"excludeAll\"|\"exposeAll\"|\"none\" {\n        const excludeMap = this._excludeMetadatas.get(target);\n        const exclude = excludeMap && excludeMap.get(undefined);\n        const exposeMap = this._exposeMetadatas.get(target);\n        const expose = exposeMap && exposeMap.get(undefined);\n        if ((exclude && expose) || (!exclude && !expose)) return \"none\";\n        return exclude ? \"excludeAll\" : \"exposeAll\";\n    }\n\n    getExposedMetadatas(target: Function): ExposeMetadata[] {\n        return this.getMetadata(this._exposeMetadatas, target);\n    }\n\n    getExcludedMetadatas(target: Function): ExcludeMetadata[] {\n        return this.getMetadata(this._excludeMetadatas, target);\n    }\n\n    getExposedProperties(target: Function, transformationType: TransformationType): string[] {\n        return this.getExposedMetadatas(target)\n            .filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                    return true;\n\n                if (metadata.options.toClassOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_CLASS ||  transformationType === TransformationType.PLAIN_TO_CLASS;\n                }\n                if (metadata.options.toPlainOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_PLAIN;\n                }\n\n                return true;\n            })\n            .map(metadata => metadata.propertyName);\n    }\n\n    getExcludedProperties(target: Function, transformationType: TransformationType): string[] {\n        return this.getExcludedMetadatas(target)\n            .filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                    return true;\n\n                if (metadata.options.toClassOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_CLASS ||  transformationType === TransformationType.PLAIN_TO_CLASS;\n                }\n                if (metadata.options.toPlainOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_PLAIN;\n                }\n\n                return true;\n            })\n            .map(metadata => metadata.propertyName);\n    }\n\n    clear() {\n        this._typeMetadatas.clear();\n        this._exposeMetadatas.clear();\n        this._excludeMetadatas.clear();\n        this._ancestorsMap.clear();\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private getMetadata<T extends { target: Function, propertyName: string }>(metadatas: Map<Function, Map<String, T>>, target: Function): T[] {\n        const metadataFromTargetMap = metadatas.get(target);\n        let metadataFromTarget: T[];\n        if (metadataFromTargetMap) {\n            metadataFromTarget = Array.from(metadataFromTargetMap.values()).filter(meta => meta.propertyName !== undefined);\n        }\n        let metadataFromAncestors: T[] = [];\n        for (const ancestor of this.getAncestors(target)) {\n            const ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                const metadataFromAncestor = Array.from(ancestorMetadataMap.values()).filter(meta => meta.propertyName !== undefined);\n                metadataFromAncestors.push(...metadataFromAncestor);\n            }\n        }        \n        return metadataFromAncestors.concat(metadataFromTarget || []);\n    }\n\n    private findMetadata<T extends { target: Function, propertyName: string }>(metadatas: Map<Function, Map<string, T>>, target: Function, propertyName: string): T {\n        const metadataFromTargetMap = metadatas.get(target);\n        if (metadataFromTargetMap) {\n            const metadataFromTarget = metadataFromTargetMap.get(propertyName);  \n            if (metadataFromTarget) {\n                return metadataFromTarget;\n            }\n        }\n        for (const ancestor of this.getAncestors(target)) {\n            const ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                const ancestorResult = ancestorMetadataMap.get(propertyName);\n                if (ancestorResult) {\n                  return ancestorResult;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    private findMetadatas<T extends { target: Function, propertyName: string }>(metadatas: Map<Function, Map<string, T[]>>, target: Function, propertyName: string): T[] {\n        const metadataFromTargetMap = metadatas.get(target);\n        let metadataFromTarget: T[];\n        if (metadataFromTargetMap) {\n            metadataFromTarget = metadataFromTargetMap.get(propertyName);    \n        }\n        let metadataFromAncestorsTarget: T[] = [];\n        for (const ancestor of this.getAncestors(target)) {\n            const ancestorMetadataMap = metadatas.get(ancestor);\n            if (ancestorMetadataMap) {\n                if (ancestorMetadataMap.has(propertyName)) {\n                  metadataFromAncestorsTarget.push(...ancestorMetadataMap.get(propertyName));\n                }\n            }\n        }\n        return (metadataFromAncestorsTarget).reverse().concat((metadataFromTarget || []).reverse());\n    }\n\n    private getAncestors(target: Function): Function[] {\n        if (!target) return [];\n        if (!this._ancestorsMap.has(target)) {\n            let ancestors: Function[] = [];\n            for (let baseClass = Object.getPrototypeOf(target.prototype.constructor);\n                 typeof baseClass.prototype !== \"undefined\";\n                 baseClass = Object.getPrototypeOf(baseClass.prototype.constructor)) {\n                ancestors.push(baseClass);\n            }\n            this._ancestorsMap.set(target, ancestors);\n        }\n        return this._ancestorsMap.get(target);\n    }\n}\n"],"sourceRoot":".."}
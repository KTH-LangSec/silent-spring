{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;AAAA,uDAA+D;AAG/D,uDAAoD;AAA5C,8CAAA,gBAAgB,CAAA;AAGxB,kCAA6B;AAE7B,IAAM,gBAAgB,GAAG,IAAI,mCAAgB,EAAE,CAAC;AAOhD,sBAAgC,MAAa,EAAE,OAA+B;IAC1E,OAAO,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AAFD,oCAEC;AASD,+BAAyC,MAAS,EAAE,WAA4B,EAAE,OAA+B;IAC7G,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;AAChF,CAAC;AAFD,sDAEC;AAOD,sBAAmC,GAAiB,EAAE,KAAY,EAAE,OAA+B;IAC/F,OAAO,gBAAgB,CAAC,YAAY,CAAC,GAAG,EAAE,KAAY,EAAE,OAAO,CAAC,CAAC;AACrE,CAAC;AAFD,oCAEC;AASD,+BAA4C,SAAY,EAAE,KAAY,EAAE,OAA+B;IACnG,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AAC7E,CAAC;AAFD,sDAEC;AAOD,sBAAgC,MAAa,EAAE,OAA+B;IAC1E,OAAO,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AAFD,oCAEC;AASD,+BAAyC,MAAS,EAAE,UAAiB,EAAE,OAA+B;IAClG,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AAC/E,CAAC;AAFD,sDAEC;AAOD,mBAA6B,MAAa,EAAE,OAA+B;IACvE,OAAO,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AAFD,8BAEC;AAED;;GAEG;AACH,qBAA+B,GAAiB,EAAE,IAAY,EAAE,OAA+B;IAC3F,OAAO,gBAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC5D,CAAC;AAFD,kCAEC;AAED;;GAEG;AACH,0BAAoC,GAAiB,EAAE,IAAY,EAAE,OAA+B;IAChG,OAAO,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACjE,CAAC;AAFD,4CAEC;AAED;;GAEG;AAEH,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC1B,+EAAc,CAAA;IACd,+EAAc,CAAA;IACd,+EAAc,CAAA;AAClB,CAAC,EAJW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAI7B","file":"index.js","sourcesContent":["import {ClassTransformer, ClassType} from \"./ClassTransformer\";\nimport {ClassTransformOptions} from \"./ClassTransformOptions\";\n\nexport {ClassTransformer} from \"./ClassTransformer\";\nexport {ClassTransformOptions} from \"./ClassTransformOptions\";\nexport * from \"./metadata/ExposeExcludeOptions\";\nexport * from \"./decorators\";\n\nconst classTransformer = new ClassTransformer();\n\n/**\n * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n */\nexport function classToPlain<T>(object: T, options?: ClassTransformOptions): Object;\nexport function classToPlain<T>(object: T[], options?: ClassTransformOptions): Object[];\nexport function classToPlain<T>(object: T|T[], options?: ClassTransformOptions): Object|Object[] {\n    return classTransformer.classToPlain(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToPlainFromExist<T>(object: T, plainObject: Object, options?: ClassTransformOptions): Object;\nexport function classToPlainFromExist<T>(object: T, plainObjects: Object[], options?: ClassTransformOptions): Object[];\nexport function classToPlainFromExist<T>(object: T, plainObject: Object|Object[], options?: ClassTransformOptions): Object|Object[] {\n    return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n */\nexport function plainToClass<T, V>(cls: ClassType<T>, plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClass<T, V>(cls: ClassType<T>, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClass<T, V>(cls: ClassType<T>, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.plainToClass(cls, plain as any, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object.\n * Uses given object as source object (it means fills given object with data from plain object).\n *  Also works with arrays.\n */\nexport function plainToClassFromExist<T, V>(clsObject: T[], plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\n\n/**\n * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n */\nexport function classToClass<T>(object: T, options?: ClassTransformOptions): T;\nexport function classToClass<T>(object: T[], options?: ClassTransformOptions): T[];\nexport function classToClass<T>(object: T|T[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.classToClass(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\nexport function classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\nexport function classToClassFromExist<T>(object: T, fromObject: T|T[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.classToClassFromExist(object, fromObject, options);\n}\n\n/**\n * Serializes given object to a JSON string.\n */\nexport function serialize<T>(object: T, options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T[], options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T|T[], options?: ClassTransformOptions): string {\n    return classTransformer.serialize(object, options);\n}\n\n/**\n * Deserializes given JSON string to a object of the given class.\n */\nexport function deserialize<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T {\n    return classTransformer.deserialize(cls, json, options);\n}\n\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\nexport function deserializeArray<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T[] {\n    return classTransformer.deserializeArray(cls, json, options);\n}\n\n/**\n * Enum representing the different transformation types.\n */\n\nexport enum TransformationType {\n    PLAIN_TO_CLASS,\n    CLASS_TO_PLAIN,\n    CLASS_TO_CLASS\n}\n"],"sourceRoot":"."}